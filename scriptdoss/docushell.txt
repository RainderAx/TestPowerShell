III. Rechercher des utilisateurs dans une OU avec -SearchBase
Pour réaliser une action sur un lot d’utilisateurs, il peut s’avérer très utile d’utiliser un filtre basé sur une unité d’organisation (OU).

Le cmdlet Get-ADUser intègre un paramètre nommé -SearchBase qui va permettre de répondre à ce besoin. Ce qui donne :

Get-ADUser -Filter * -SearchBase "CN=Users,DC=IT-CONNECT,DC=LOCAL" -Server SRV-ADDS-01.it-connect.local

Pour l’unité d’organisation, vous devez préciser son « chemin » correspondant à son DN (DistinguishedName). Vous pouvez le retrouver dans les propriétés de l’OU via l’onglet « Editeur d’attributs » ou en PowerShell grâce à la commande :

Get-ADOrganizationalUnit -Filter * | Format-Table DistinguishedName

Ajouter une valeur dans un attribut en masse à partir d’un CSV

$CSVFile = "C:\Scripts\AD_USERS\Utilisateurs.csv"
$CSVData = Import-CSV -Path $CSVFile -Delimiter ";" -Encoding UTF8

Foreach($Utilisateur in $CSVData){
    # Construction du login (SamAccountName)
    $UtilisateurLogin = ($Utilisateur.Prenom).Substring(0,1) + "." + $Utilisateur.Nom
}

Nous allons intégrer à notre boucle la commande Set-ADUser pour modifier le champ « Description » pour chaque utilisateur. La commande est :

Set-ADUser -Identity $UtilisateurLogin -Description $Utilisateur.Fonction

Dans le script, on va au préalable s’assurer que l’utilisateur existe avant de chercher à le modifier. Au final, voici le code complet de la boucle :

Foreach($Utilisateur in $CSVData){

    # Construction du login (SamAccountName)
    $UtilisateurLogin = ($Utilisateur.Prenom).Substring(0,1) + "." + $Utilisateur.Nom

    if (Get-ADUser -Identity $UtilisateurLogin)
    {
       Write-Output "L'identifiant $UtilisateurLogin existe, l'utilisateur va être modifié."
       Set-ADUser -Identity $UtilisateurLogin -Description $Utilisateur.Fonction
    }
}

https://www.it-connect.fr/active-directory-automatiser-sauvegarde-des-zones-dns/

#Set-ADUser : Droits d’accès insuffisants pour effectuer cette opération
Au caractère Ligne:8 : 1
+ Set-ADUser -Identity $user -Office '$buro'
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (alexis.joseph.cab:ADUser) [Set-ADUser], ADException
    + FullyQualifiedErrorId : ActiveDirectoryServer:8344,Microsoft.ActiveDirectory.Management.Commands.SetADUser
##

$poire = "alexis.joseph"

$buro = 6013

$user = (Get-ADUser -Filter "UserPrincipalName -like '$poire*'" -Properties *).SamAccountName

Set-ADUser -Identity $user -Office '$buro'
\\\
Impossible d’appeler une méthode dans une expression Null.
Au caractère Ligne:20 : 1
+ $window.FindName("Close_Click").Add_Click({
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation : (:) [], RuntimeException
    + FullyQualifiedErrorId : InvokeMethodOnNull
 
Impossible d’appeler une méthode dans une expression Null.
Au caractère Ligne:24 : 1
+ $window.ShowDialog()
+ ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation : (:) [], RuntimeException
    + FullyQualifiedErrorId : InvokeMethodOnNull


nommer le bouton dans le XAML 
<Button x:Name="CloseButton" Content="Fermer" Width="100" Margin="10" HorizontalAlignment="Center"/>

Utiliser le nom pour attacher l'événement Click :
$closeButton = $window.FindName("CloseButton")
$closeButton.Add_Click({
    $window.Close()
})
\\\\
Get-ADUser : Impossible de valider l'argument sur le paramètre « Identity ». La propriété Identity sur l’argument est nulle ou vide.
Au caractère C:\Scripts\Alexis\doss\test.ps1:57 : 51
+                   $blablou = Get-ADUser -Identity "$Bureau" -Properti ...
+                                                   ~~~~~~~~~
    + CategoryInfo          : InvalidData : (:) [Get-ADUser], ParameterBindingValidationException
    + FullyQualifiedErrorId : ParameterArgumentValidationError,Microsoft.ActiveDirectory.Management.Commands.GetADUser
\\\\
Get-ADUser : Erreur lors de l’analyse de la requête: «samAccountName -like 'test*' + 'alexis*' » Message d’erreur: «Operator Not 
supported: » à la position: «30».
Au caractère Ligne:131 : 16
+ ...  $blablou = Get-ADUser -Filter "samAccountName -like '$Global:Bureau* ...
+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ParserError: (:) [Get-ADUser], ADFilterParsingException
    + FullyQualifiedErrorId : ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDi 
   rectory.Management.Commands.GetADUser

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Au caractère Ligne:311 : 1
+ [void]$Form10.MainMenuStrip = $Menu
+ ~~~~~~
[void] ne peut pas être utilisé en tant que type de paramètre ou à gauche d’une affectation.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : VoidTypeConstraintNotAllowed